@page "/wordcontexts"

@using WordsInTextsSearcher.Data
@using WordsInTextsSearcher.Entities
@using TextsProc.LIba.Parsing.DumbStaff;

@inject WordsService wordsService
@inject ProjectsService projectsService
@inject UsersService usersService
@inject WordFormsService wordFormsService
@inject NavigationManager navigationManager

<div class="row">
    <div class="col-6">
        <div class="form-group">
            <textarea rows="5" id="wordInp" style="resize:none"
                      placeholder="слова для поиска контекстов через пробел"
                      @bind="mainWord" width="100%" class="form-control"></textarea>
        </div>
    </div>
    <div class="col-6">
        <div class="row">
            <div class="col-6">
                <div class="form-group d-flex flex-row align-items-baseline">
                    <label style="white-space: nowrap;" for="tagsSelect" class="mr-2">Минимальная длина слова</label>
                    <select id="tagsSelect" class="form-control" @bind="minWordLength">
                        @foreach (var n in Enumerable.Range(1, 10))
                        {
                            <option value=@n>@n</option>
                        }
                    </select>
                </div>
            </div>
            <div class="col-6">
                <div class="form-group d-flex flex-row align-items-baseline">
                    <label style="white-space: nowrap;" for="tagsSelect" class="mr-2">Расстояние от главного</label>
                    <select id="tagsSelect" class="form-control" @bind="contextLeftRightRange">
                        @foreach (var n in Enumerable.Range(1, 10))
                        {
                            <option value=@n>@n</option>
                        }
                    </select>
                </div>
            </div>
        </div>
        <div class="row">
            <div class="col-12">
                <button class="btn btn-outline-primary" @onclick="@(async() => await ShowContexts())">
                    Показать контексты
                </button>
                <button class="btn btn-outline-primary" @onclick="@(async() => await ExportFios())">
                    Экспортировать контексты
                </button>
            </div>
        </div>
    </div>
    <table class="table table-striped table-hover mt-1" hidden="@(contextsDatas.Count() == 0)">
        <thead>
            <tr>
                <td>Текст</td>
                <td>Слово</td>
            </tr>
        </thead>
        <tbody>
            @foreach (var cData in contextsDatas.Where(x => x.Words.Any()))
            {
                @foreach (var word in cData.Words)
                {
                    <tr>
                        <td>id: @cData.TextRecord.Id : @cData.TextRecord.Title</td>
                        <td>@word</td>
                    </tr>
                }
            }
        </tbody>
    </table>
</div>

@code {
    [Inject] private ProjectsService _projectsService { get; set; }
    [Inject] private TextRecordsService _textRecordsService { get; set; }

    private IEnumerable<ContextData> contextsDatas = new List<ContextData>();
    private string mainWord = string.Empty;
    private int minWordLength = 4;
    private int contextLeftRightRange = 3;

    private async Task<IEnumerable<TextRecord>> GetTextRecords()
    {
        return await _textRecordsService.GetTextRecords(t =>
            t.ProjectId == _projectsService.CurrentProject.Id);
    }

    private class ContextData
    {
        public TextRecord TextRecord { get; set; }
        public IEnumerable<string> Words { get; set; }
    }

    private IEnumerable<ContextData> GetContextsDatas(IEnumerable<TextRecord> textRecords)
    {
        var res = new List<ContextData>();
        var naiveWordsContextGetter = new NaiveWordsContextGetter();
        foreach (var r in textRecords)
        {
            var mainWordForms = mainWord.Split(new char[] {' ', '\r', '\n', '\t'}, 
                StringSplitOptions.RemoveEmptyEntries).Distinct();
            var names = naiveWordsContextGetter.GetWords(r.Text, mainWordForms, 
                contextLeftRightRange, w => w.Length >= minWordLength).Distinct();
            res.Add(new ContextData { TextRecord = r, Words = names });
        }

        return res;
    }

    private async Task ShowContexts()
    {
        var records = await GetTextRecords();
        contextsDatas = GetContextsDatas(records);
    }

    protected override async Task OnInitializedAsync()
    {
        if (usersService.CurrentUser == null)
        {
            navigationManager.NavigateTo("/login");
        }

        if (projectsService.CurrentProject == null)
        {
            navigationManager.NavigateTo("/projects");
        }

        await Task.CompletedTask;
    }

    private async Task ExportFios()
    {
        await Task.CompletedTask;
    }
}

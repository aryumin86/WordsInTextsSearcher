@page "/textrecordslist"

@using WordsInTextsSearcher.Data
@using WordsInTextsSearcher.Entities
@inject TextRecordsService textRecordsService

<h3>Тексты</h3>

<div class="row">
    <div class="col col-10">
        <div class="row">
            <div class="col col-12">
                <input type="text" @bind="currentTextRecord.Title"
                       style="width: 100%" class="mb-1" placeholder="название какое-то" />
            </div>
        </div>
        <div class="row">
            <div class="col col-12">
                <textarea rows="8" style="width: 100%; resize: none;" 
                          @bind="currentTextRecord.Text"
                          placeholder="сюда вставьте новый текст"></textarea>
            </div>
        </div>
    </div>
    <div class="col col-2 d-flex flex-column">
        <button class="btn btn-outline-primary mb-1"
                @onclick="@(async () => await CreateTextRecord())">@getCreateUpdateButtonText()</button>
        <button class="btn btn-outline-warning mb-1" 
                @onclick="@(async () => await ClearForm())">Очистить</button>
        <button class="btn btn-outline-primary mb-1">Импорт</button>
        <button class="btn btn-outline-primary mb-1">Экспорт</button>
    </div>
</div>
<div class="row" hidden="@hideTextRecordsTable()">
    <table class="table table-striped">
        <tr>
            <th scope="col">Id</th>
            <th scope="col">Название</th>
            <th scope="col">Дата</th>
            <th scope="col"></th>
        </tr>
        @foreach (var textRecord in textRecords)
        {
            <tr>
                <th scope="row">@textRecord.Id</th>
                <td class="textRecordTitleTd" 
                    @onclick="@(async() => await SetTextRecordAsCurrent(textRecord))">@textRecord.Title</td>
                <td>@textRecord.WhenCreated</td>
                <td>
                    <div class="d-flex flex-row">
                        <button class="btn btn-outline-primary mr-1"
                                @onclick="@(async() => await SetTextRecordAsCurrent(textRecord))">
                            Редактировать
                        </button>
                        <button @onclick="@(async() => await DeleteTextRecord(textRecord.Id))"
                                class="btn btn-outline-danger">
                            Удалить
                        </button>
                    </div>
                </td>
            </tr>
        }
    </table>
    

</div>

@code {

    [Inject]
    private WordsInTextsSearcher.Data.TextRecordsService _recordsService { get; set; }

    private IEnumerable<TextRecord> textRecords;
    private TextRecord currentTextRecord = new TextRecord { };
    private string getCreateUpdateButtonText() => 
        currentTextRecord.Id == 0 ? "создать" : "обновить";
    private bool hideTextRecordsTable() => !textRecords.Any();

    protected override async Task OnInitializedAsync()
    {
        textRecords = await textRecordsService.GetTextRecords();
    }

    private async Task CreateTextRecord()
    {
        if (currentTextRecord.Id != 0)
        {
            await UpdateTextRecord(currentTextRecord);
        }
        else
        {
            currentTextRecord.WhenCreated = DateTime.Now;
            await _recordsService.CreateTextRecord(currentTextRecord);
        }
        await ClearForm();
    }

    private async Task UpdateTextRecord(TextRecord textRecord)
    {
        await _recordsService.UpdateTextRecord(textRecord);
    }

    private async Task ClearForm()
    {
        currentTextRecord = new TextRecord { };
        await Task.CompletedTask;
    }

    private async Task DeleteTextRecord(int id)
    {
        await _recordsService.DeleteTextRecord(id);
        await ClearForm();
    }

    private async Task SetTextRecordAsCurrent(TextRecord textRecord)
    {
        currentTextRecord = textRecord;
        await Task.CompletedTask;
    }
}

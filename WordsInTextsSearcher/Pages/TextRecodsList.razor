@page "/textrecordslist"

@using WordsInTextsSearcher.Data
@using WordsInTextsSearcher.Entities

@inject TextRecordsService textRecordsService
@inject TagsService tagsService
@inject TextAttributesService textAttributesService
@inject ProjectsService projectsService
@inject NavigationManager navigationManager

<h3>Тексты</h3>

<div class="row">
    <div class="col col-10">
        <div class="row">
            <div class="col col-6">
                <input type="text" @bind="currentTextRecord.Title"
                       style="width: 100%" class="form-control mb-1" placeholder="название какое-то" />
            </div>
            <div class="col col-6">
                <div class="form-group d-flex flex-row align-items-baseline">
                    <label style="white-space: nowrap;" for="tagsSelect" class="mr-2">Тег</label>
                    <select id="tagsSelect" class="form-control" @bind="currentTextRecord.TagId">
                        @foreach (var t in allTextTags)
                        {
                            <option value="@(t.Id)">@t.Text</option>
                        }
                    </select>
                </div>
            </div>
        </div>
        <div class="row">
            <div class="col col-6">
                <textarea rows="10" style="width: 100%; resize: none;" class="form-control mb-2"
                          @bind="currentTextRecord.Text"
                          placeholder="сюда вставьте новый текст"></textarea>
            </div>
            <div class="col col-6">
                <div class="attrs-container">
                    <table class="table table-striped">
                        <tr>
                            <th scope="col">Атрибут</th>
                            <th scope="col">Значение</th>
                        </tr>
                        @foreach (var attr in allTextAttributes.Where(x => x.Values != null && x.Values.Any()))
                        {
                            <tr>
                                <td>@attr.Name</td>
                                <td>
                                    <select class="form-control">
                                        <option>Не выбрано</option>
                                        @foreach(var av in attr.Values)
                                        {
                                            <option value="@av.Id">@av.Value</option>
                                        }
                                    </select>
                                </td>
                            </tr>
                        }
                    </table>
                </div>
            </div>
        </div>
    </div>
    <div class="col col-2 d-flex flex-column">
        <button class="btn btn-outline-primary mb-1"
                @onclick="@(async () => await CreateTextRecord())">
            @getCreateUpdateButtonText()
        </button>
        <button class="btn btn-outline-warning mb-1"
                @onclick="@(async () => await ClearForm())">
            Очистить
        </button>
        <button class="btn btn-outline-primary mb-1">Импорт</button>
        <button class="btn btn-outline-primary mb-3">Экспорт</button>
        <strong>Всего текстов: @textRecords.Count()</strong>
    </div>
</div>
<div class="row" hidden="@hideTextRecordsTable()">
    <table class="table table-striped">
        <tr>
            <th scope="col">Id</th>
            <th scope="col">Название</th>
            <th scope="col">Дата</th>
            <th scope="col"></th>
        </tr>
        @foreach (var textRecord in textRecords)
        {
            <tr class="@(textRecord.Id == currentTextRecord.Id ? "active-row" : "")">
                <th scope="row">@textRecord.Id</th>
                <td class="textRecordTitleTd"
                    @onclick="@(async() => await SetTextRecordAsCurrent(textRecord))">
                    @textRecord.Title
                </td>
                <td>@textRecord.WhenCreated</td>
                <td>
                    <div class="d-flex flex-row">
                        <button @onclick="@(async() => await DeleteTextRecord(textRecord.Id))"
                                class="btn btn-outline-danger">
                            Удалить
                        </button>
                    </div>
                </td>
            </tr>
        }
    </table>
</div>

@code {

    [Inject] private WordsInTextsSearcher.Data.TextRecordsService _recordsService { get; set; }
    [Inject] private ProjectsService _projectsService { get; set; }
    [Inject] private TextAttributesService _textAttributesService { get; set; }

    private IEnumerable<TextRecord> textRecords;
    private IEnumerable<Tag> allTextTags;
    private IEnumerable<TextAttribute> allTextAttributes;
    private TextRecord currentTextRecord = new TextRecord { };
    private string getCreateUpdateButtonText() =>
        currentTextRecord.Id == 0 ? "создать" : "обновить";
    private bool hideTextRecordsTable() => !textRecords.Any();

    protected override async Task OnInitializedAsync()
    {
        if (projectsService.CurrentProject == null)
        {
            navigationManager.NavigateTo("/projects");
        }

        textRecords = 
            await textRecordsService.GetTextRecords(x => x.ProjectId == projectsService.CurrentProject.Id);
        allTextTags = 
            await tagsService.GetTags(x => x.ProjectId == projectsService.CurrentProject.Id);
        allTextAttributes = 
            await textAttributesService.GetTextAttributesAsync(x => x.ProjectId == projectsService.CurrentProject.Id);
    }

    private async Task CreateTextRecord()
    {
        if (currentTextRecord.Id != 0)
        {
            await UpdateTextRecord(currentTextRecord);
        }
        else
        {
            currentTextRecord.WhenCreated = DateTime.Now;
            currentTextRecord.Project = _projectsService.CurrentProject;
            currentTextRecord.ProjectId = _projectsService.CurrentProject.Id;
            await _recordsService.CreateTextRecord(currentTextRecord);
        }
        await ClearForm();
    }

    private async Task UpdateTextRecord(TextRecord textRecord)
    {
        await _recordsService.UpdateTextRecord(textRecord);
        await ClearForm();
    }

    private async Task ClearForm()
    {
        currentTextRecord = new TextRecord { };
        await Task.CompletedTask;
    }

    private async Task DeleteTextRecord(int id)
    {
        await _recordsService.DeleteTextRecord(id);
        await ClearForm();
    }

    private async Task SetTextRecordAsCurrent(TextRecord textRecord)
    {
        currentTextRecord = textRecord;
        await Task.CompletedTask;
    }
}

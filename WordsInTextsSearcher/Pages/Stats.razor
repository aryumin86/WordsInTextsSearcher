@page "/stats"

@using WordsInTextsSearcher.Data
@using WordsInTextsSearcher.Entities
@using WordsInTextsSearcher.Helpers
@using NPOI.Util

@inject TagsService tagsService
@inject ProjectsService projectsService
@inject UsersService usersService
@inject NavigationManager navigationManager

<h3>Статистика</h3>

<div class="row mb-2">
    <div class="col col-6">
        <button class="btn btn-outline-primary mr-1"
                @onclick="@(async() => await exportXLSXTermTextMatrix())">
            Экспорт term-text матрицы
        </button>
        <button class="btn btn-outline-primary"
                @onclick="@(async() => await showTermTextMatrix())">
            Показать term-text матрицу
        </button>
    </div>
    <div class="col col-3">
        <div class="form-group d-flex flex-row align-items-baseline">
            <label style="white-space: nowrap;" for="tagsSelect" class="mr-2">Только тег</label>
            <select id="tagsSelect" class="form-control" @bind="selectedTextTag.Id">
                <option value="0">не выбран</option>
                @foreach (var t in allTextTags)
                {
                    <option value="@(t.Id)">@t.Text</option>
                }
            </select>
        </div>
    </div>
</div>

<div class="text-center" hidden="@(!showSpinner)">
    <div class="spinner-border text-primary" role="status"
         style="width: 6rem; height: 6rem; margin-top: 6rem;">
        <span class="sr-only">Делаем...</span>
    </div>
</div>

@if (_termsStats != null && _termsStats.Any())
{
    <div class="stats-tab-container">
        <table class="table table-striped">
            <tr>
                <th scope="col">Название текста</th>
                @foreach (var word in _termsStats.First().WordsCount)
                {
                    <th>@_wordsNames[@word.Key]</th>
                }
            </tr>
            @foreach (var termTextStat in _termsStats.Where(x => (selectedTextTag.Id == 0 ? true : x.TextRecord.Tag != null && x.TextRecord.Tag.Id == selectedTextTag.Id)))
            {
                <tr>
                    <td>
                        @termTextStat.TextRecord.Title
                    </td>
                    @foreach (var word in termTextStat.WordsCount)
                    {
                        <td>@word.Value</td>
                    }
                </tr>
            }
        </table>
    </div>

}


@code {

    [Inject] private TextRecordsService _recordsService { get; set; }
    [Inject] private WordsService _wordsService { get; set; }
    [Inject] private StatsService _statsService { get; set; }
    [Inject] private TextAttributesService _textAttributesService { get; set; }
    [Inject] private TextAttrBindingsService _textAttrBindingsService { get; set; }

    [Inject]
    private NavigationManager _navManager { get; set; }
    [Inject]
    private IJSRuntime _js { get; set; }

    private IEnumerable<Tag> allTextTags;

    protected override async Task OnInitializedAsync()
    {
        if (usersService.CurrentUser == null)
        {
            navigationManager.NavigateTo("/login");
        }

        if (projectsService.CurrentProject == null)
        {
            navigationManager.NavigateTo("/projects");
        }

        allTextTags = await tagsService.GetTags(x => x.ProjectId == projectsService.CurrentProject.Id);
    }

    private bool showSpinner = false;
    private IEnumerable<TextTermsStat> _termsStats;
    private Dictionary<int, string> _wordsNames;
    private Tag selectedTextTag = new Tag { Id = 0 };

    private async Task exportXLSXTermTextMatrix()
    {
        _termsStats = null;
        showSpinner = true;
        await Task.Delay(TimeSpan.FromMilliseconds(100));
        var (texts, words, attrs, bindinds) = await GetTermTextData();
        var termTextStats = _statsService.GetTextTermsStats(texts, words);
        var termTextMatrixWorkBook =
            new ExportHelper().CreateTermTextMatrixInXLSX(termTextStats, words, attrs, bindinds);
        ByteArrayOutputStream bos = new ByteArrayOutputStream();
        try
        {
            termTextMatrixWorkBook.Write(bos);
        }
        finally
        {
            bos.Close();
        }
        byte[] bytes = bos.ToByteArray();
        await WordsInTextsSearcher.Helpers.FileUtil.SaveAs(_js, "term-text-matrix.xlsx", bytes);
        showSpinner = false;
    }

    private async Task showTermTextMatrix()
    {
        showSpinner = true;
        await Task.Delay(TimeSpan.FromMilliseconds(100));

        var (texts, words, attrs, bindinds) = await GetTermTextData();
        _termsStats = _statsService.GetTextTermsStats(texts, words);

        showSpinner = false;
    }

    private async Task<(IEnumerable<TextRecord>, IEnumerable<Word>, IEnumerable<TextAttribute>, IEnumerable<TextAttrBinding>)> GetTermTextData()
    {
        var texts = await _recordsService.GetTextRecords(t => t.ProjectId == projectsService.CurrentProject.Id && (selectedTextTag.Id == 0 ? true : t.Tag.Id == selectedTextTag.Id));
        texts = texts.ToList();
        var words = await _wordsService.GetWords(x => x.ProjectId == projectsService.CurrentProject.Id);
        words = words.ToList();
        _wordsNames = words.ToDictionary(w => w.Id, w => w.Text);
        var textAttributes =
            await _textAttributesService.GetTextAttributesAsync(x => x.ProjectId == projectsService.CurrentProject.Id);
        var projectTextsIds = texts.Select(x => x.Id);
        var attrBindings =
            await _textAttrBindingsService.GetTextAttrBindings(x => projectTextsIds.Contains(x.TextRecordId));
        return (texts, words, textAttributes, attrBindings);
    }
}
